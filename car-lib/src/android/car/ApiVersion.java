/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.car;

import android.car.annotation.AddedIn;
import android.os.Parcel;
import android.os.Parcelable;

import com.android.car.internal.util.DataClass;

/**
 * Abstraction of Android APIs.
 *
 * <p>This class is used to represent a pair of major / minor API versions: the "major" version
 * represents a "traditional" Android SDK release, while the "minor" is used to indicate incremental
 * releases for that major.
 *
 * <p>This class is needed because the standard Android SDK API versioning only supports major
 * releases, but {@code Car} APIs can now (starting on
 * {@link android.os.Build.Build.VERSION_CODES#TIRAMISU Android 13}) be updated on minor releases
 * as well.
 */
@AddedIn(majorVersion = 33, minorVersion = 1)
@DataClass(genToString = false, genHiddenConstructor = true)
public final class ApiVersion implements Parcelable {

    /**
     * Gets the major version of the API represented by this object.
     */
    private final int mMajorVersion;

    /**
     * Represents a minor version change of API for the same {@link #getMajorVersion()}.
     *
     * <p>It will reset to {@code 0} whenever {@link #getMajorVersion()} is updated
     * and will increase by {@code 1} if car builtin or other car platform part is changed with the
     * same {@link #getMajorVersion()}.
     *
     * <p>Client should check this version to use APIs which were added in a minor-only version
     * update.
     */
    private final int mMinorVersion;


    /**
     * Checks if this API version meets the required version number.
     *
     * @param requiredApiVersionMajor Required major version number. Minor version is not checked.
     *
     * @return {@code true} if the {@link #getMajorVersion() major version} is newer than
     *         {@code requiredApiVersionMajor}.
     */
    @AddedIn(majorVersion = 33, minorVersion = 1)
    public boolean isAtLeast(int requiredApiVersionMajor) {
        return mMajorVersion >= requiredApiVersionMajor;
    }

    /**
     * Checks if this API version meets the required version numbers.
     *
     * @param requiredApiVersionMajor Required major version number.
     * @param requiredApiVersionMinor Required minor version number.
     *
     * @return {@code true} if the {@link #getMajorVersion() major version} is newer than
     *         {@code requiredApiVersionMajor} or if the {@link #getMajorVersion() major version}
     *         is the same as {@code requiredApiVersionMajor} with the
     *         {@link #getMinorVersion() minor version} the same or newer than
     *         {@code requiredApiVersionMinor}.
     */
    @AddedIn(majorVersion = 33, minorVersion = 1)
    public boolean isAtLeast(int requiredApiVersionMajor, int requiredApiVersionMinor) {
        return (mMajorVersion > requiredApiVersionMajor)
                || (mMajorVersion == requiredApiVersionMajor
                        && mMinorVersion >= requiredApiVersionMinor);
    }

    @Override
    public String toString() {
        return "ApiVersion[major=" + mMajorVersion + ", minor=" + mMinorVersion + "]";
    }



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/services/Car/car-lib/src/android/car/ApiVersion.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    /**
     * Creates a new ApiVersion.
     *
     * @param majorVersion
     *   Gets the major version of the API represented by this object.
     * @param minorVersion
     *   Represents a minor version change of API for the same {@link #getMajorVersion()}.
     *
     *   <p>It will reset to {@code 0} whenever {@link #getMajorVersion()} is updated
     *   and will increase by {@code 1} if car builtin or other car platform part is changed with the
     *   same {@link #getMajorVersion()}.
     *
     *   <p>Client should check this version to use APIs which were added in a minor-only version
     *   update.
     * @hide
     */
    @DataClass.Generated.Member
    public ApiVersion(
            int majorVersion,
            int minorVersion) {
        this.mMajorVersion = majorVersion;
        this.mMinorVersion = minorVersion;

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * Gets the major version of the API represented by this object.
     */
    @DataClass.Generated.Member
    public int getMajorVersion() {
        return mMajorVersion;
    }

    /**
     * Represents a minor version change of API for the same {@link #getMajorVersion()}.
     *
     * <p>It will reset to {@code 0} whenever {@link #getMajorVersion()} is updated
     * and will increase by {@code 1} if car builtin or other car platform part is changed with the
     * same {@link #getMajorVersion()}.
     *
     * <p>Client should check this version to use APIs which were added in a minor-only version
     * update.
     */
    @DataClass.Generated.Member
    public int getMinorVersion() {
        return mMinorVersion;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@android.annotation.NonNull Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        dest.writeInt(mMajorVersion);
        dest.writeInt(mMinorVersion);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ ApiVersion(@android.annotation.NonNull Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        int majorVersion = in.readInt();
        int minorVersion = in.readInt();

        this.mMajorVersion = majorVersion;
        this.mMinorVersion = minorVersion;

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @android.annotation.NonNull Parcelable.Creator<ApiVersion> CREATOR
            = new Parcelable.Creator<ApiVersion>() {
        @Override
        public ApiVersion[] newArray(int size) {
            return new ApiVersion[size];
        }

        @Override
        public ApiVersion createFromParcel(@android.annotation.NonNull Parcel in) {
            return new ApiVersion(in);
        }
    };

    @DataClass.Generated(
            time = 1654555297967L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/services/Car/car-lib/src/android/car/ApiVersion.java",
            inputSignatures = "private static final @android.car.annotation.AddedIn java.lang.String PROPERTY_PLATFORM_MINOR_VERSION\nstatic final @android.car.annotation.AddedIn int PLATFORM_VERSION_MINOR_INT\nprivate final  int mMajorVersion\nprivate final  int mMinorVersion\npublic @android.car.annotation.AddedIn boolean isAtLeast(int)\npublic @android.car.annotation.AddedIn boolean isAtLeast(int,int)\npublic @java.lang.Override java.lang.String toString()\nclass ApiVersion extends java.lang.Object implements [android.os.Parcelable]\n@com.android.car.internal.util.DataClass(genToString=false, genHiddenConstructor=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
